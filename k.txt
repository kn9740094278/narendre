npm install express mongoose body-parser cors

// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;


server.js
// Middleware
app.use(cors());
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('your_mongo_connection_string', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error(err));

// Define a User model
const User = mongoose.model('User', new mongoose.Schema({
    name: String,
    email: String,
    password: String
}));

// API endpoint to handle form submission
app.post('/api/register', async (req, res) => {
    const { name, email, password } = req.body;
    const user = new User({ name, email, password });
    await user.save();
    res.status(201).send({ message: 'User registered successfully!' });
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

npm install axios

handlesubmit js file
import { useState } from "react"; 
import axios from 'axios';

export default function Form() {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [submitted, setSubmitted] = useState(false);
    const [error, setError] = useState(false);

    const handleName = (e) => setName(e.target.value);
    const handleEmail = (e) => setEmail(e.target.value);
    const handlePassword = (e) => setPassword(e.target.value);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (name === '' || email === '' || password === '') {
            setError(true);
        } else {
            try {
                await axios.post('http://localhost:5000/api/register', { name, email, password });
                setSubmitted(true);
                setError(false);
                // Clear input fields
                setName('');
                setEmail('');
                setPassword('');
            } catch (err) {
                console.error(err);
                setError(true);
            }
        }
    };

    const successMessage = () => (
        <div className="success" style={{ display: submitted ? '' : 'none' }}>
            <h1>Bro {name}, you have registered!</h1>
        </div>
    );

    const errorMessage = () => (
        <div className="error" style={{ display: error ? '' : 'none' }}>
            <h1>Fill up the blanks</h1>
        </div>
    );

    return (
        <div className="form">
            <div>
                <h1>User Registration</h1>
            </div>
            <div className="messages">
                {errorMessage()}
                {successMessage()}
            </div>
            <form onSubmit={handleSubmit}>
                <label className="label" htmlFor="name">Name</label>
                <input id="name" onChange={handleName} className="input" value={name} type="text" />
                <label className="label" htmlFor="email">Email</label>
                <input id="email" onChange={handleEmail} className="input" value={email} type="email" />
                <label className="label" htmlFor="password">Password</label>
                <input id="password" onChange={handlePassword} className="input" value={password} type="password" />
                <button className="btn" type="submit">
                    Submit
                </button>
            </form>
        </div>
    );
}

